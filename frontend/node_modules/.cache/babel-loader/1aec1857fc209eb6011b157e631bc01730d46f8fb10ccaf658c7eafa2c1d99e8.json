{"ast":null,"code":"var _jsxFileName = \"D:\\\\dexlx-project (2)\\\\dexlx-project\\\\frontend\\\\src\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// src/context/UserContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Retrieve the user data from the JWT token stored in localStorage\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedUser = jwt_decode(token); // Decode the JWT token to get user data\n        setUser(decodedUser);\n      } catch (err) {\n        console.error('Token is invalid or expired');\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 1\n  }, this);\n};\n\n// Export the context and provider\n_s(UserProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","token","localStorage","getItem","decodedUser","jwt_decode","err","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/dexlx-project (2)/dexlx-project/frontend/src/UserContext.js"],"sourcesContent":["// src/context/UserContext.js\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// Create the context\r\nconst UserContext = createContext();\r\n\r\n// Create a provider component\r\nconst UserProvider = ({ children }) => {\r\nconst [user, setUser] = useState(null);\r\n\r\n// Retrieve the user data from the JWT token stored in localStorage\r\nuseEffect(() => {\r\nconst token = localStorage.getItem('token');\r\nif (token) {\r\n    try {\r\n    const decodedUser = jwt_decode(token); // Decode the JWT token to get user data\r\n    setUser(decodedUser);\r\n    } catch (err) {\r\n    console.error('Token is invalid or expired');\r\n    }\r\n}\r\n}, []);\r\n\r\nreturn (\r\n<UserContext.Provider value={{ user, setUser }}>\r\n    {children}\r\n</UserContext.Provider>\r\n);\r\n};\r\n\r\n// Export the context and provider\r\nexport { UserContext, UserProvider };\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,SAAS,MAAM,YAAY;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IAChB,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACP,IAAI;QACJ,MAAMG,WAAW,GAAGC,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC;QACvCD,OAAO,CAACI,WAAW,CAAC;MACpB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACdC,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;MAC5C;IACJ;EACA,CAAC,EAAE,EAAE,CAAC;EAEN,oBACAd,OAAA,CAACC,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEX,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EAC1CA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEvB,CAAC;;AAED;AAAAhB,EAAA,CAvBMF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAwBlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}