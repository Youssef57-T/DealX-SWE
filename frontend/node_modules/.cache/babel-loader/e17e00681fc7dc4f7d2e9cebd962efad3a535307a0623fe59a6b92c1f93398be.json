{"ast":null,"code":"var _jsxFileName = \"D:\\\\dexlx-project (2)\\\\dexlx-project\\\\frontend\\\\src\\\\ProductList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductList = () => {\n  _s();\n  const [products, setProducts] = useState([]); // State to store products\n  const [loading, setLoading] = useState(false); // State to manage loading state\n  const [offset, setOffset] = useState(0); // State to manage offset\n  const [limit] = useState(10); // Set a default limit\n\n  const loadMoreData = async () => {\n    if (loading) return; // Prevent loading while a request is in progress\n\n    setLoading(true); // Set loading to true when making a request\n\n    try {\n      // Fetch the products with the current offset and limit\n      const response = await axios.get(`htttps/localhost:5000/api/products?page=${Math.floor(offset / limit) + 1} &limit=${limit}`);\n\n      // Append new products to the existing list\n      setProducts(prevProducts => [...prevProducts, ...response.data.products]);\n\n      // Update the offset for the next fetch\n      setOffset(prevOffset => prevOffset + limit);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    } finally {\n      setLoading(false); // Set loading to false once the request is done\n    }\n  };\n  useEffect(() => {\n    // Initial fetch when the component mounts\n    loadMoreData();\n  }, []); // Empty array means this runs only once when the component mounts\n\n  useEffect(() => {\n    // Add scroll event listener to trigger loadMoreData when user scrolls to bottom\n    const handleScroll = () => {\n      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 100) {\n        loadMoreData(); // Load more data when scrolled to the bottom\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [loading]); // Re-run this effect whenever loading state changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-list mainuser\",\n    children: [products.map(product => /*#__PURE__*/_jsxDEV(Card, {\n      product: product\n    }, product.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading more products...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductList, \"8fRB34GGcdbKJBPqtxOAFBH4/no=\");\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useEffect","useState","axios","Card","jsxDEV","_jsxDEV","ProductList","_s","products","setProducts","loading","setLoading","offset","setOffset","limit","loadMoreData","response","get","Math","floor","prevProducts","data","prevOffset","error","console","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","className","children","map","product","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/dexlx-project (2)/dexlx-project/frontend/src/ProductList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\n\r\nconst ProductList = () => {\r\n  const [products, setProducts] = useState([]);   // State to store products\r\n  const [loading, setLoading] = useState(false);   // State to manage loading state\r\n  const [offset, setOffset] = useState(0);         // State to manage offset\r\n  const [limit] = useState(10);                    // Set a default limit\r\n\r\n  const loadMoreData = async () => {\r\n    if (loading) return;  // Prevent loading while a request is in progress\r\n    \r\n    setLoading(true); // Set loading to true when making a request\r\n    \r\n    try {\r\n      // Fetch the products with the current offset and limit\r\n      const response = await axios.get(`htttps/localhost:5000/api/products?page=${Math.floor(offset / limit) + 1} &limit=${limit}`);\r\n      \r\n      // Append new products to the existing list\r\n      setProducts((prevProducts) => [...prevProducts, ...response.data.products]);\r\n      \r\n      // Update the offset for the next fetch\r\n      setOffset((prevOffset) => prevOffset + limit);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    } finally {\r\n      setLoading(false); // Set loading to false once the request is done\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initial fetch when the component mounts\r\n    loadMoreData();\r\n  }, []); // Empty array means this runs only once when the component mounts\r\n\r\n  useEffect(() => {\r\n    // Add scroll event listener to trigger loadMoreData when user scrolls to bottom\r\n    const handleScroll = () => {\r\n      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 100) {\r\n        loadMoreData(); // Load more data when scrolled to the bottom\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('scroll', handleScroll);\r\n    \r\n    // Cleanup event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [loading]); // Re-run this effect whenever loading state changes\r\n\r\n  return (\r\n    <div className=\"product-list mainuser\">\r\n      {products.map((product) => (\r\n        <Card key={product.id} product={product} />\r\n      ))}\r\n      \r\n      {loading && <div>Loading more products...</div>} {/* Show loading indicator */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}